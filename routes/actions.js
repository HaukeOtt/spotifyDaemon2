const express = require('express');
const url = require('url')
const spotify = require("../services/spotify_api");
const config = require("../config");
const {urlencoded} = require("express");
const {SPOTIFY_ACCESS_TOKEN, LIKED_SONGS_PLAYLIST_ID} = require("../config");
const router = express.Router();


router.post('/lab', async function (req, res, next) {
    const accessToken = typeof req.cookies[config.SPOTIFY_ACCESS_TOKEN] == "string" ? req.cookies[config.SPOTIFY_ACCESS_TOKEN] : null
    const refreshToken = typeof req.cookies[config.SPOTIFY_REFRESH_TOKEN] == "string" ? req.cookies[config.SPOTIFY_REFRESH_TOKEN] : null
    let playlistId = typeof req.cookies[config.LIKED_SONGS_PLAYLIST_ID] == "string" ? req.cookies[config.LIKED_SONGS_PLAYLIST_ID] : null

    const userData = await spotify.getProfile(accessToken)
    let userPlaylists = await spotify.getUserPlaylists(accessToken,userData.id)
    console.log('user playlists:', userPlaylists.items.map(item=>item.name))

    let myPlaylists = await spotify.getPlaylists(accessToken)
    console.log('my playlists:', myPlaylists.items.map(item=>item.name))

    const message = undefined
    res.redirect(url.format({
        pathname: '/',
        query: {message}
    }))
})

router.post('/update-liked-songs-playlist', async function (req, res, next) {
    const accessToken = typeof req.cookies[config.SPOTIFY_ACCESS_TOKEN] == "string" ? req.cookies[config.SPOTIFY_ACCESS_TOKEN] : null
    const refreshToken = typeof req.cookies[config.SPOTIFY_REFRESH_TOKEN] == "string" ? req.cookies[config.SPOTIFY_REFRESH_TOKEN] : null
    let playlistId = typeof req.cookies[config.LIKED_SONGS_PLAYLIST_ID] == "string" ? req.cookies[config.LIKED_SONGS_PLAYLIST_ID] : null

    const playlistNamePrefix = 'Lieblingssongs';
    const playlistDescription = 'generated by spotifyDemon';

    const userData = await spotify.getProfile(accessToken)
    const playlistName = `${playlistNamePrefix} ${userData.display_name}`

    // get playlist

    let playlist = await spotify.getPlaylist(accessToken, playlistId)
    console.log('existing playlist:', playlist?.id)
    if (!playlist?.id) {
        playlist = await spotify.createPlaylist(accessToken, userData.id, playlistName, playlistDescription)
        playlistId = playlist.id;
        res.cookie(LIKED_SONGS_PLAYLIST_ID, playlistId)
        req.cookies[LIKED_SONGS_PLAYLIST_ID] = playlistId

        console.log('new playlist:', playlist.id)
    }

    // get all tracks

    let offset = 0
    let trackUris = []
    while (true) {
        const tracksData = await spotify.getTracks(accessToken, 50, offset)
        if (tracksData.error) {
            console.error('error:', tracksData.error, 'description:', tracksData.error_description)
        }
        const newUris = tracksData.items.map(item => item.track.uri);
        //console.log('newUris.length:', newUris.length)
        trackUris = trackUris.concat(newUris)

        if (newUris.length !== 50) {
            break;
        }

        offset += 50
    }
    console.log('trackUris.length:', trackUris.length)
    // remove old playlist tracks
    {
        // get old playlist tracks
        offset = 0
        oldTrackUris = []
        while (true) {
            const tracksData = await spotify.getPlaylistTracks(accessToken, playlistId, 50, offset)
            if (tracksData.error) {
                console.error('error:', tracksData.error, 'description:', tracksData.error_description)
            }
            const tracksChunk = tracksData.items.map(item => item.track.uri);
            //console.log('newUris.length:', tracksChunk.length)
            oldTrackUris = oldTrackUris.concat(tracksChunk)

            if (tracksChunk.length !== 50) {
                break;
            }

            offset += 50
        }
        console.log('oldTrackUris.length', oldTrackUris.length)

        // remove playlist tracks
        let snapshotId = undefined;
        while (oldTrackUris.length) {
            const tracksChunk = oldTrackUris.splice(0, 50).map(uri => ({uri}))
            //console.log('tracksChunk.length', tracksChunk.length)
            const resp = await spotify.removePlaylistTracks(accessToken, playlistId, tracksChunk, snapshotId)
            snapshotId = resp.snapshot_id
        }
        console.log('removed old tracks')

    }

    // fill playlist
    let snapshotId = undefined;
    while (trackUris.length) {
        const tracksChunk = trackUris.splice(0, 100)
        //console.log('tracksChunk.length', tracksChunk.length)

        const resp = await spotify.addToPlaylist(accessToken, playlistId, tracksChunk, snapshotId)
        snapshotId = resp.snapshot_id
    }
    console.log('added new tracks')

    const message = undefined
    res.redirect(url.format({
        pathname: '/',
        query: {message}
    }))
});

module.exports = router;
